<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Conferences on { always: &#39;coding&#39; } </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://alwayscoding.ca/categories/conferences/</link>
    <language>en-us</language>
    
    
    <updated>Sat, 17 Sep 2016 09:30:00 UTC</updated>
    
    <item>
      <title>RustFest 2016 Talks</title>
      <link>http://alwayscoding.ca/momentos/2016/09/17/rustfest-2016-talks/</link>
      <pubDate>Sat, 17 Sep 2016 09:30:00 UTC</pubDate>
      
      <guid>http://alwayscoding.ca/momentos/2016/09/17/rustfest-2016-talks/</guid>
      <description>

&lt;p&gt;Photo of Ryan Levick taking care of conference housekeeping
&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/intro.jpg&#39; alt=&#39;Ryan Levick Intro to RustFest&#39; /&gt;
by &lt;a href=&#34;https://twitter.com/timglabisch&#34;&gt;@timglabisch&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;keynote-subtyping-in-rust-and-clarke-s-third-law&#34;&gt;Keynote: Subtyping in Rust and Clarke&amp;rsquo;s Third Law&lt;/h2&gt;

&lt;p&gt;by Felix Klock&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/subtyping.jpg&#39; alt=&#39;Felix Klock&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/andrewhobden&#34;&gt;@andrewhobden&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lifetimes!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;learning-to-love-the-unfamiliar&#34;&gt;Learning to Love the Unfamiliar&lt;/h2&gt;

&lt;p&gt;by Brian Pearce (ME!)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/rustfestbp-intro.jpg&#39; alt=&#39;Brian Pearce&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/andrewhobden&#34;&gt;@andrewhobden&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An intro to rust for developers coming from other languages.&lt;/p&gt;

&lt;p&gt;Maybe types&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Some&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Result&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ok&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Err&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;try!&lt;/code&gt; Macro and learning to catch &lt;code&gt;panics!&lt;/code&gt; (runtime exceptions)&lt;/p&gt;

&lt;p&gt;Testing
 - Inline tests for functions you just wrote
 - /tests/ dir for integration testing
 - random order testing by default
 - parrallel test runs.
  - Can cause problems when simultaniously doing io or sharing resources.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&#34;time-gap-2-missed-talks&#34;&gt;Time Gap - 2 missed talks&lt;/h1&gt;

&lt;p&gt;Needed to take some alone time post talk to wind down.
Will update this after I watch the videos.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;intermezzos-a-teaching-operating-system&#34;&gt;intermezzOS: a teaching operating system&lt;/h2&gt;

&lt;p&gt;by Ashley Williams&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/intermezzos.jpg&#39; alt=&#39;Ashley Williams&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/rustfest&#34;&gt;@RustFest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Introducing systems programming concepts to experienced devs from other languages.&lt;/p&gt;

&lt;p&gt;Do you know JS? Why not write an OS!&lt;/p&gt;

&lt;p&gt;&lt;del&gt;OS Dev.org&lt;/del&gt; Terrible site.&lt;/p&gt;

&lt;p&gt;What is a kernal: The core of the os.&lt;/p&gt;

&lt;p&gt;Building an OS is like coding in the dark.&lt;/p&gt;

&lt;p&gt;Virtualization - Vagrant, VBox, XQuartz&lt;/p&gt;

&lt;p&gt;BIOS - Basic input output service
GRUB&lt;/p&gt;

&lt;p&gt;Linking - How the sections of an input file should be mapped in the output file.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Teaching is the way of letting you know how sloppy your thinking is.&amp;rdquo;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;teaching-myself-rust-through-the-medium-of-coordinate-system-transforms-and-ffi&#34;&gt;Teaching myself Rust through the medium of coordinate system transforms and FFI&lt;/h2&gt;

&lt;p&gt;by Stephan Hügel&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/coord.jpg&#39; alt=&#39;Stephan Hügel&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/andrewhobden&#34;&gt;@andrewhobden&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Phone GPS is only generally accurate to 15-meters.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mcarton/rust-herbie-lint&#34;&gt;https://github.com/mcarton/rust-herbie-lint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/georust&#34;&gt;https://github.com/georust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://urschrei.github.io/rustfest/#/&#34;&gt;Slides&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;why-you-d-be-better-off-using-quickcheck-when-porting-to-rust&#34;&gt;Why you&amp;rsquo;d be better off using QuickCheck when porting to Rust&lt;/h2&gt;

&lt;p&gt;by Martin Hellspong&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/quickcheck.jpg&#39; alt=&#39;Martin Hellspong&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/adrian_brink&#34;&gt;@adrian_brink&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find more bugs with less effort per bug.&lt;/p&gt;

&lt;p&gt;QuickCheck can be set to explore. Found a bug requiring a sequence of 17 api calls.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/BurntSushi/quickcheck&#34;&gt;QuickCheck for Rust (with shrinking)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes builds fail due to stability issues. Making quickcheck more stable will
trade stability for the amount of possible bugs to find.&lt;/p&gt;

&lt;p&gt;Microcontroller project
 - control software for christmas tree lights&lt;/p&gt;

&lt;p&gt;1600 QuickCheck tests
- Run single threaded, takes a couple hours.&lt;/p&gt;

&lt;p&gt;Statement types&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fact&lt;/li&gt;
&lt;li&gt;Inverse&lt;/li&gt;
&lt;li&gt;Compare known good

&lt;ul&gt;
&lt;li&gt;Unoptimized&lt;/li&gt;
&lt;li&gt;Idealistic&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notable uses of QC&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Regex, byteorder, intertools&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;linux-usb-hid-interfacing-in-userspace&#34;&gt;Linux USB HID Interfacing in Userspace&lt;/h2&gt;

&lt;p&gt;by William Light&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/hid.jpg&#39; alt=&#39;William Light&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/adrian_brink&#34;&gt;@adrian_brink&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;empathetic-communication-why-vulnerability-is-the-key-to-collaboration&#34;&gt;Empathetic communication: why vulnerability is the key to collaboration&lt;/h2&gt;

&lt;p&gt;by Sharon Steed&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/communication.jpg&#39; alt=&#39;Sharon Steed&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/rustfest&#34;&gt;@RustFest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I stutter&amp;rdquo;&lt;br /&gt;
Avoidance of words, or situations that would increase or ephathize stuttering.&lt;/p&gt;

&lt;p&gt;Later in life facing fears of talking by entering more situations that require
talking.&lt;/p&gt;

&lt;p&gt;Communication at it&amp;rsquo;s core should be an act of empathy.&lt;/p&gt;

&lt;p&gt;Microblogs are killing email:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Slack (is the fastest growing B2B SaaS business)&lt;/li&gt;
&lt;li&gt;Snaphat&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;Texting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failures of communication cannot be automated away. You must confront those
failures eye-to-eye, not screen-to-screen.&lt;/p&gt;

&lt;p&gt;Collaboration fails because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People are afraid of being wrong&lt;/li&gt;
&lt;li&gt;People are afraid of being misunderstood&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Silence kill Collaboration.&lt;/p&gt;

&lt;p&gt;Speak to people the way they need to be spoken to in order to receive your message.&lt;/p&gt;

&lt;p&gt;Great communication takes vulnerability and courage.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;techniques-for-writing-concurrent-applications-with-asynchronous-i-o&#34;&gt;Techniques for writing concurrent applications with asynchronous I/O&lt;/h2&gt;

&lt;p&gt;by Matthieu Wipliez&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/io.jpg&#39; alt=&#39;Matthiue Wipliez&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/rustfest&#34;&gt;@RustFest&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;keynote-science-tools-borrow-rust&#34;&gt;Keynote: Science tools borrow Rust&lt;/h2&gt;

&lt;p&gt;by Hanneli Tavante&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustfest2016/science.jpg&#39; alt=&#39;Hanneli Tavante&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/rustfest&#34;&gt;@RustFest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Transforming Math concepts in to code in an expressive way.&lt;/p&gt;

&lt;p&gt;&amp;ldquo;We had trouble expressing mathematics in &lt;a href=&#34;https://www.gnu.org/software/octave/&#34;&gt;Octave&lt;/a&gt; with C++.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Matrices, Why are they important?&lt;/p&gt;

&lt;p&gt;You can use unsafe, just don&amp;rsquo;t make it public.&lt;/p&gt;

&lt;p&gt;Let your public method handle the function call to your unsafe method. Let your
public method handle the failure cases.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RustConf 2016 Talks</title>
      <link>http://alwayscoding.ca/momentos/2016/09/10/rustconf-2016-talks/</link>
      <pubDate>Sat, 10 Sep 2016 10:00:00 UTC</pubDate>
      
      <guid>http://alwayscoding.ca/momentos/2016/09/10/rustconf-2016-talks/</guid>
      <description>

&lt;h2 id=&#34;opening-keynote&#34;&gt;Opening Keynote&lt;/h2&gt;

&lt;p&gt;by Aaron Turon and Niko Matsakis&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/keynote.jpg&#39; alt=&#39;Aaron Turon and Nika Matsakis&#39; /&gt;
photo by: &lt;a href=&#34;https://twitter.com/eigenrick&#34;&gt;@eigenrick&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;175 new features since 1.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New features underway&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specialization&lt;/li&gt;
&lt;li&gt;impl Trait&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;?&lt;/code&gt; operator&lt;/li&gt;
&lt;li&gt;Macro 1.1 offers custom derive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compiler internals redesigned&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mir in orbit&lt;/li&gt;
&lt;li&gt;Dynamic drop flags&lt;/li&gt;
&lt;li&gt;Incremental comp&lt;/li&gt;
&lt;li&gt;Error messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Challenges in the Rust survey&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 in 4 Learning curve (First 3 weeks is rough)&lt;/li&gt;
&lt;li&gt;1 in 7 More libraris&lt;/li&gt;
&lt;li&gt;1 in 9 &amp;ldquo;Maturity&amp;rdquo;&lt;/li&gt;
&lt;li&gt;1 in 19 IDEs&lt;/li&gt;
&lt;li&gt;1 in 20 Compiler Perf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speed and reliability are core values of rust, but for 2017, productivity should as well.&lt;/p&gt;

&lt;p&gt;Potential areas for new/improved libs&lt;/p&gt;

&lt;p&gt;Rust on the server&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Futures for async I/O&lt;/li&gt;
&lt;li&gt;Tokio for protocols&lt;/li&gt;
&lt;li&gt;Middleware ecosystem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parallelism &amp;amp; Concurrency&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deliver on Rust&amp;rsquo;s potential&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serialization&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stable serde&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rust numerics/ML&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Establish foundations?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;serde&lt;/code&gt; is pronounced &lt;code&gt;serdy&lt;/code&gt; not &lt;code&gt;serd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discoverability&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A tricky balance:&lt;/p&gt;

&lt;p&gt;Make it easy to find the &amp;ldquo;best&amp;rdquo;&lt;br /&gt;
… but allow newcomers to take root&lt;br /&gt;
… but incentivize the right things&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;rustup

&lt;ul&gt;
&lt;li&gt;NDK support&lt;/li&gt;
&lt;li&gt;Emscripten/wasm&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;cargo

&lt;ul&gt;
&lt;li&gt;Private/shared&lt;/li&gt;
&lt;li&gt;Build system integration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;rustfmt

&lt;ul&gt;
&lt;li&gt;Strike team for the format&lt;/li&gt;
&lt;li&gt;The bike shed of bike sheds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phildawes/racer&#34;&gt;Racer&lt;/a&gt; for code completion in editors.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;the-illustrated-adventure-survival-guide&#34;&gt;The Illustrated Adventure Survival Guide&lt;/h2&gt;

&lt;p&gt;by Liz Baillie&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/survivalguide.jpg&#39; alt=&#39;Adventure Survival Guide&#39; /&gt;
photo by &lt;a href=&#34;https://twitter.com/QEDunham&#34;&gt;@QEDunham&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes vs Traits&lt;/li&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Stack &amp;amp; Heap&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;integrating-rust-and-vlc&#34;&gt;Integrating Rust and VLC&lt;/h2&gt;

&lt;p&gt;by Geoffroy Couprie&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/vlc.jpg&#39; alt=&#39;Integrating Rust and VLC&#39; /&gt;
photo by &lt;a href=&#34;https://twitter.com/eigenrick&#34;&gt;@nathanaeljones&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VLC has &lt;code&gt;C&lt;/code&gt; code and is now using &lt;code&gt;Rust&lt;/code&gt; to replace the &lt;code&gt;C&lt;/code&gt; code.&lt;/p&gt;

&lt;p&gt;Autotools with Rust.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;the-rustplay-classifier&#34;&gt;The RustPlay Classifier&lt;/h2&gt;

&lt;p&gt;by Suchin Gururangan and Colin O&amp;rsquo;Brien&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/rustplay.jpg&#39; alt=&#39;The RustPlay Classifier&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Technical Debt in Data Science&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Siloed teams&lt;/li&gt;
&lt;li&gt;Pipeline junkgles&lt;/li&gt;
&lt;li&gt;Unscalable Experiments&lt;/li&gt;
&lt;li&gt;…and all the normal engineering tech debt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“A mature system might end up being (at most) 5% learning code.”&lt;/p&gt;

&lt;p&gt;Service oriented Machine Learning&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Collection&lt;/li&gt;
&lt;li&gt;Data Inventory&lt;/li&gt;
&lt;li&gt;Feature Extraction&lt;/li&gt;
&lt;li&gt;Model Generation&lt;/li&gt;
&lt;li&gt;Prediction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tailhook/vagga&#34;&gt;Vagga: a containerization tool without daemons&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/nikomatsakis/rayon&#34;&gt;Rayon: A data parallelism library for Rust&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;using-generics-effectively&#34;&gt;Using Generics Effectively&lt;/h2&gt;

&lt;p&gt;by Without Boats&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/generics.jpg&#39; alt=&#39;Using Generics Effectively&#39; /&gt;&lt;/p&gt;

&lt;p&gt;How will I know when it&amp;rsquo;s a good idea to use a &lt;code&gt;Trait&lt;/code&gt; or an &lt;code&gt;Enum&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Pattern-Language-Buildings-Construction-Environmental/dp/0195019199/ref=sr_1_1?ie=UTF8&amp;amp;qid=1473543382&amp;amp;sr=8-1&amp;amp;keywords=a+pattern+language&#34;&gt;A Pattern Language Book&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“Design patterns are a sign your language itsn&amp;rsquo;t powerful enough.”&lt;/p&gt;

&lt;p&gt;Patterns don&amp;rsquo;t have to be template of classes.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;back-to-the-futures&#34;&gt;Back to the Futures&lt;/h2&gt;

&lt;p&gt;by Alex Crichton&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/futures.jpg&#39; alt=&#39;Back to the Futures&#39; /&gt;&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s a Future?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DB query&lt;/li&gt;
&lt;li&gt;RPC Request&lt;/li&gt;
&lt;li&gt;Timeouts&lt;/li&gt;
&lt;li&gt;CPU Intensive Work&lt;/li&gt;
&lt;li&gt;Socket Readiness&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fastest server&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mio is state of the art&lt;/li&gt;
&lt;li&gt;Primarily using state machines&lt;/li&gt;
&lt;li&gt;Avoids unnecessary allocation/synchronization&lt;/li&gt;
&lt;li&gt;Futures must &amp;ldquo;compile down&amp;rdquo; to the same code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zero-cost futures&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No allocations in combinators&lt;/li&gt;
&lt;li&gt;No synchronization in combinators&lt;/li&gt;
&lt;li&gt;One dynamic dispatch per event&lt;/li&gt;
&lt;li&gt;One allocation per connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tokio-rs/tokio&#34;&gt;Tokio: Asynchronous I/O for Rust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/futures2.jpg&#39; alt=&#39;Back to the Futures&#39; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;a-modern-editor-in-rust&#34;&gt;A Modern Editor in Rust&lt;/h2&gt;

&lt;p&gt;by Raph Levien&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/google/xi-editor&#34;&gt;The Xi Editor: A modern editor with a backend written in Rust&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/editor.jpg&#39; alt=&#39;A Modern Editor in Rust&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Main goal: performance&lt;/p&gt;

&lt;p&gt;How to make a fast editor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a fast language&lt;/li&gt;
&lt;li&gt;Exploit multicore parallelism&lt;/li&gt;
&lt;li&gt;Use advanced algorithms and data structures

&lt;ul&gt;
&lt;li&gt;Ropes&lt;/li&gt;
&lt;li&gt;Minimal incremental algorithms&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Asynchrony

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t block slow operations&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Operation Transformation&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Request to plugin is async&lt;/li&gt;
&lt;li&gt;User may edit while plugin is thinking&lt;/li&gt;
&lt;li&gt;Transform results from plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Xi-rope internals&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rope is a specialization of a generic tree&lt;/li&gt;
&lt;li&gt;Parametrized on &lt;code&gt;Leaf&lt;/code&gt; and &lt;code&gt;NodeInfo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3 different specializations of generic tree

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rope&lt;/code&gt; (Leaf = String)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Line breaks&lt;/code&gt; (Lead = vec of line breaks offsets)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rich text spans&lt;/code&gt; (Leaf = vec of spans; interval)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Xi-rpc today&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON-RPC

&lt;ul&gt;
&lt;li&gt;Why?&lt;/li&gt;
&lt;li&gt;JSON implementations are fast&lt;/li&gt;
&lt;li&gt;An easy dep to satisfy&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Threaded design

&lt;ul&gt;
&lt;li&gt;Separate thread blocking on input&lt;/li&gt;
&lt;li&gt;Inter-thread communication with channels&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Arc&amp;lt;Mutex&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; to acquire state.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;rfc-in-order-to-form-a-more-perfect-union&#34;&gt;RFC: In Order to Form a More Perfect union&lt;/h2&gt;

&lt;p&gt;by Josh Triplett&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/rfc.jpg&#39; alt=&#39;RFCs&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Linux Kernal Virtual Machine&lt;br /&gt;
/dev/kvm&lt;/p&gt;

&lt;p&gt;Floppy drive, vm security issue.&lt;/p&gt;

&lt;p&gt;Unions&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Multi storage variables&lt;/li&gt;
&lt;li&gt;Different types&lt;/li&gt;
&lt;li&gt;Overlapping types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Rust RFC&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Community process&lt;/li&gt;
&lt;li&gt;Lightweight but not to light&lt;/li&gt;
&lt;li&gt;Shepard&lt;/li&gt;
&lt;li&gt;Rust team makes approval decisions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;#[repr(C)] struct&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Crater&lt;/code&gt; takes a proposed change to the language, loads the entire cargo env
base, and checks for breakage.&lt;/p&gt;

&lt;p&gt;Improvements through the RFC process by way of multiple person interaction.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;closing-keynote-systems-programming-with-rust&#34;&gt;Closing Keynote - Systems Programming with Rust&lt;/h2&gt;

&lt;p&gt;by Julia Evans&lt;/p&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/systems1.jpg&#39; alt=&#39;Systems Programming&#39; /&gt;
photo by &lt;a href=&#34;https://twitter.com/TedMielczarek&#34;&gt;@TedMielczarek&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rules of programming experiments&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it doesn&amp;rsquo;t have to be good&lt;/li&gt;
&lt;li&gt;it doesn&amp;rsquo;t have to work&lt;/li&gt;
&lt;li&gt;you have to learn something&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/rustconf2016/systems.jpg&#39; alt=&#39;Systems Programming&#39; /&gt;
photo by &lt;a href=&#34;https://twitter.com/_lizbaillie&#34;&gt;_lizbaillie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;libdrawf&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no idea how it works&lt;/li&gt;
&lt;li&gt;terrible API&lt;/li&gt;
&lt;li&gt;slow&lt;/li&gt;
&lt;li&gt;linker problems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gimli-rs/gimli&#34;&gt;Gimli: A lazy, zero-copy parser for the DWARF debugging format&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;rustconf-2016-conclusion&#34;&gt;RustConf 2016 Conclusion&lt;/h2&gt;

&lt;p&gt;The year the &lt;code&gt;Rust&lt;/code&gt; conferences started! The overall vibe was excellent. Everyone
was just excited to be there. For me personally the hallway track was very
different then the conferences I&amp;rsquo;m used to. I&amp;rsquo;m used to hallway chat about apps
and gems and web development. The general chatter here was system performance
which is out of my normal space. So I learned a lot. As well as sat in on conversations
I considered a little over my head.&lt;/p&gt;

&lt;p&gt;The workshops on Friday were great as well. I participated in the Intermediate
workshop. Although I really wish I could have grabbed some pieces of both the
intermediate and advanced. I have a pretty good grasp on lifetimes, but do
frequently run in to problems with lifetimes and structs. Where as in the
intermediate I had a good concept of &lt;code&gt;Traits&lt;/code&gt; but run into problems with generics.
So both workshops had a little something I wanted but decided to go to the intermediate
workshop and was not disapointed. &lt;a href=&#34;http://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/&#34;&gt;Check out some of my notes&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Traits and Threads Workshop</title>
      <link>http://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/</link>
      <pubDate>Fri, 09 Sep 2016 10:00:00 UTC</pubDate>
      
      <guid>http://alwayscoding.ca/momentos/2016/09/09/traits-and-threads-workshop/</guid>
      <description>

&lt;p&gt;These are raw notes taken at &lt;a href=&#34;http://rustconf.com/&#34;&gt;RustConf&lt;/a&gt; during the “Traits and Threads” workshop put on by &lt;a href=&#34;http://www.twitter.com/aaron_turon&#34;&gt;Aaron Turon&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://rust-tutorials.com/exercises/&#34;&gt;All Exercises&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Methods are function that accept self&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;self.items == &amp;amp;(self.items)&lt;/code&gt; where the borrow (&lt;code&gt;&amp;amp;&lt;/code&gt;) is for the item, not for &lt;code&gt;self&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Structs have no default value, requires creating all values.&lt;/li&gt;
&lt;li&gt;mut as &lt;code&gt;mute&lt;/code&gt; not like a mixed breed dog&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Abstraction: The Plan&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generics&lt;/li&gt;
&lt;li&gt;Traits

&lt;ul&gt;
&lt;li&gt;As Interfaces&lt;/li&gt;
&lt;li&gt;For Code Resuse&lt;/li&gt;
&lt;li&gt;For Perator Overloading&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Trait Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;traits-are-rusts-interfaces&#34;&gt;Traits are rusts interfaces.&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;trait&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;Print&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;print(&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;Print&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333399; font-weight: bold&#34;&gt;u64&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;print(&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;println&lt;span style=&#34;color: #333333&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;Print&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;char&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;print(&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;println&lt;span style=&#34;color: #333333&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;background-color: #fff0f0&#34;&gt;&amp;quot;&amp;#39;{}&amp;#39;&amp;quot;&lt;/span&gt;),&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br /&gt;
What happens if you try to define the same trait or impl that is defined already by someone else? (naming collisions etc)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Naming collisions follow normal examples but when you try to write an interface for a type that you don’t own (code gluing) you will run in to Coherence issues, for any given trait and type there is a single implementation known to the compiler.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br /&gt;
Why does the compiler allow “different” match arms?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Given the below code: &lt;code&gt;total += price&lt;/code&gt; is an expression and &lt;code&gt;return None&lt;/code&gt; Breaks out of the function, so the compiler “assigns” it the type you need. It’s a “get out of jail free card.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.rust-lang.org/?code=%23%21%5Ballow%28dead_code%29%5D%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F+The+trait%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0Atrait+Price+%7B%0A++++fn+price%28%26self%2C+item_name%3A+%26str%29+-%3E+Option%3Cf32%3E%3B%0A%7D%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F+Store%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0Astruct+Store+%7B%0A++++name%3A+String%2C%0A++++items%3A+Vec%3CItem%3E%2C%0A%7D%0A%0A%23%5Bderive%28Debug%29%5D%0Astruct+Item+%7B%0A++++name%3A+%26%27static+str%2C%0A++++price%3A+f32%2C%0A%7D%0A%0Aimpl+Store+%7B%0A++++fn+new%28name%3A+String%29+-%3E+Store+%7B%0A++++++++Store+%7B%0A++++++++++++name%3A+name%2C%0A++++++++++++items%3A+Vec%3A%3Anew%28%29%2C%0A++++++++%7D%0A++++%7D%0A%0A++++fn+add_item%28%26mut+self%2C+item%3A+Item%29+%7B%0A++++++++self.items.push%28item%29%3B%0A++++%7D%0A%7D%0A%0Aimpl+Price+for+Store+%7B%0A++++fn+price%28%26self%2C+item_name%3A+%26str%29+-%3E+Option%3Cf32%3E+%7B%0A++++++++for+item+in+%26self.items+%7B%0A++++++++++++if+item.name+%3D%3D+item_name+%7B%0A++++++++++++++++return+Some%28item.price%29%3B%0A++++++++++++%7D%0A++++++++%7D%0A++++++++None%0A++++%7D%0A%7D%0A%0Afn+build_store%28%29+-%3E+Store+%7B%0A++++let+mut+store+%3D+Store%3A%3Anew%28format%21%28%22Rustmart%22%29%29%3B%0A++++store.add_item%28Item+%7B+name%3A+%22chocolate%22%2C+price%3A+5.0+%7D%29%3B%0A++++store.add_item%28Item+%7B+name%3A+%22socks%22%2C+price%3A+23.0+%7D%29%3B%0A++++store.add_item%28Item+%7B+name%3A+%22plush+Mozilla+dinosaur%22%2C+price%3A+13.0+%7D%29%3B%0A++++store%0A%7D%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F+Factory%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%2F%2F+A+factory+for+just+a+single+kind+of+item%0Astruct+Factory+%7B%0A++++item_name%3A+%26%27static+str%2C%0A++++wholesale_price%3A+f32%2C%0A%7D%0A%0Aimpl+Price+for+Factory+%7B%0A++++fn+price%28%26self%2C+item_name%3A+%26str%29+-%3E+Option%3Cf32%3E+%7B%0A++++++++%2F%2F+Goal%3A+return+the+price+of+the+factory%27s+item%2C+if+the+name+matches%3B%0A++++++++%2F%2F+otherwise+return+%60None%60.%0A++++++++None%0A++++%7D%0A%7D%0A%0Afn+build_factory%28%29+-%3E+Factory+%7B%0A++++Factory+%7B%0A++++++++item_name%3A+%22sprocket%22%2C%0A++++++++wholesale_price%3A+7.67%2C%0A++++%7D%0A%7D%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F+Total+price%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0Afn+total_price%3CP%3A+Price%3E%28provider%3A+%26P%2C+shopping_list%3A+%26%5B%26str%5D%29+-%3E+Option%3Cf32%3E+%7B%0A++++%2F%2F+Goal%3A+compute+the+total+price+of+all+items+in+the+shopping%0A++++%2F%2F+list.+If+any+of+the+options+are+not+present%2C+return+%60None%60.%0A++++None%0A%7D%0A%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%2F%2F+Tests%0A%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%0A%0A%23%5Btest%5D%0Afn+total_price_store%28%29+%7B%0A++++let+store+%3D+build_store%28%29%3B%0A++++let+list+%3D+vec%21%5B%22chocolate%22%2C+%22plush+Mozilla+dinosaur%22%5D%3B%0A++++assert_eq%21%28total_price%28%26store%2C+%26list%29%2C+Some%2818.0%29%29%3B%0A%7D%0A%0A%23%5Btest%5D%0Afn+total_price_missing_store%28%29+%7B%0A++++let+store+%3D+build_store%28%29%3B%0A++++let+list+%3D+vec%21%5B%22chocolate%22%2C+%22plush+Mozilla+dinosaur%22%2C+%22fork+and+knife%22%5D%3B%0A++++assert_eq%21%28total_price%28%26store%2C+%26list%29%2C+None%29%3B%0A%7D%0A%0A%23%5Btest%5D%0Afn+total_price_factory%28%29+%7B%0A++++let+factory+%3D+build_factory%28%29%3B%0A++++let+list+%3D+vec%21%5B%22sprocket%22%5D%3B%0A++++assert_eq%21%28total_price%28%26factory%2C+%26list%29%2C+Some%287.67%29%29%3B%0A%7D%0A%0A%23%5Btest%5D%0Afn+total_price_missing_factory%28%29+%7B%0A++++let+factory+%3D+build_factory%28%29%3B%0A++++let+list+%3D+vec%21%5B%22sprocket%22%2C+%22socks%22%5D%3B%0A++++assert_eq%21%28total_price%28%26factory%2C+%26list%29%2C+None%29%3B%0A%7D%0A&amp;amp;version=nightly&#34;&gt;The Exercise:&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;mut&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;total&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0.0&lt;/span&gt;;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;item&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;shopping_list&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;match&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;provider.price(item)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;Some&lt;/span&gt;(price)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;total&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;price,&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #007020&#34;&gt;Some&lt;/span&gt;(total)&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;reuse-default-methods&#34;&gt;Reuse: Default Methods&lt;/h3&gt;

&lt;p&gt;Questions: Should we write methods, or functions?&lt;/p&gt;

&lt;p&gt;When in doubt, lean on methods. Writing things as methods instead of functions allows for writing different impls for those methods.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;reuse-layering&#34;&gt;Reuse: Layering&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;trait&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;Clone&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;clone(&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;Self;&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;Clone&lt;/span&gt;,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;U&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;Clone&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;Clone&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;(T,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;U)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;clone(&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;(T,&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;U)&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;        &lt;/span&gt;(&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;0.&lt;/span&gt;clone(),&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;.&lt;span style=&#34;color: #6600EE; font-weight: bold&#34;&gt;1.&lt;/span&gt;clone())&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;impl&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;Clone&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;Clone&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;Vec&lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #333333&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #FF0000; background-color: #FFAAAA&#34;&gt;…&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br /&gt;
We’re using traits in places where we could use types, what is the relationship between traits and types?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
We’re not yet using traits in a place where types are expected. We’re saying &lt;code&gt;T:&lt;/code&gt; is an addon that something has to be true for the type that we’re given. Traits are not types, they are information about types.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br /&gt;
Why &lt;code&gt;T&lt;/code&gt; &amp;amp; &lt;code&gt;U&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;T&lt;/code&gt; for type, and &lt;code&gt;U&lt;/code&gt; because it’s the next letter in the alphabit.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt;&lt;br /&gt;
Could I defined a generic that says it can &lt;em&gt;not&lt;/em&gt; have a specific trait.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
In most cases you wouldn’t need to although it is possible using some pretty advanced techniques.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;objects&#34;&gt;Objects&lt;/h3&gt;

&lt;p&gt;Containers are homogeneous. Traits can kind of be used as types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;trait&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;Print&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;print(&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #007020&#34;&gt;self&lt;/span&gt;);&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;print_slice(slice&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;Print])&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;elem&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;in&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;slice&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;elem.print();&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;fn&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;main()&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;{&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #bbbbbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #008800; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;slice&lt;span style=&#34;color: #333333&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;Print]&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #bbbbbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #333333&#34;&gt;&amp;amp;&lt;/span&gt;...&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
}&lt;span style=&#34;color: #bbbbbb&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;[&amp;amp;Print]&lt;/code&gt; is actually an array of pointers, as pointers are all the same sized. vs a &lt;code&gt;Char&lt;/code&gt; and &lt;code&gt;Item&lt;/code&gt; which would be mixed sizes. The compiler will perform this type of abstraction for you.&lt;/p&gt;

&lt;h4 id=&#34;generics-vs-objects&#34;&gt;Generics vs Objects&lt;/h4&gt;

&lt;p&gt;Generics ( aka zero cost abstractions)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work for singletons&lt;/li&gt;
&lt;li&gt;Work for uniform collection&lt;/li&gt;
&lt;li&gt;Provide static dispatch

&lt;ul&gt;
&lt;li&gt;Good for performance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Objects&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Must live behind a pointer&lt;/li&gt;
&lt;li&gt;Work for heterogeneous collections&lt;/li&gt;
&lt;li&gt;Provide dynamic dispatch

&lt;ul&gt;
&lt;li&gt;Bad for performance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;threads&#34;&gt;Threads&lt;/h2&gt;

&lt;p&gt;Moden &lt;em&gt;Parallel&lt;/em&gt; systems programming without the hassle, crashes, heisenbugs, fear.&lt;/p&gt;

&lt;p&gt;Multiparadigm&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Message passing&lt;/li&gt;
&lt;li&gt;Mutable shared memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Principles_of_Compiler_Design&#34;&gt;Principals of compiler design&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;No data races, No matter what, regardless of paradigm.&lt;/p&gt;

&lt;p&gt;What are data races?&lt;br /&gt;
Two unsynchronized threads accessing the same data where at lease one writes.&lt;/p&gt;

&lt;p&gt;Ingredients of a data race:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aliasing (multiple things with access to the same thing)&lt;/li&gt;
&lt;li&gt;Mutation (at least one thread is writing)&lt;/li&gt;
&lt;li&gt;No ordering (compiler has no idea this is happening and will optimize assuming it’s not happening)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ownership and borrowing system is at the core of ensuring you can have both aliasing or mutation, but never at the same time. No data races = No accidentally-shared state.&lt;/p&gt;

&lt;p&gt;All sharing is explicit. No threads can have access to this thing while your thread has access to it.&lt;/p&gt;

&lt;p&gt;Each thread will &lt;code&gt;move&lt;/code&gt; and take ownership of variables passed to that thread. Usage in the main thread is no longer permitted, and you’ll get a compile time error.&lt;/p&gt;

&lt;p&gt;Sharing immutable data between threads?&lt;br /&gt;
Use &lt;code&gt;std::sync::Arc&lt;/code&gt;. With &lt;code&gt;Arc&lt;/code&gt; you can not know at what point it will be deallocated. It eliminates itself once all threads have finished with itself. Arc keeps a count for how much it’s been cloned and when it’s dropped it decrements and eliminates itself once at 0.&lt;/p&gt;

&lt;p&gt;Static lifetime is exempt and allowed to be passed to different threads.&lt;/p&gt;

&lt;h3 id=&#34;channels&#34;&gt;Channels&lt;/h3&gt;

&lt;p&gt;Two threads can transfer ownership of data through a channel. Channels create a transmitter and a receiver. Tx and Rx can be passed to threads. Whoever has the Tx, can send data to whoever owns the Rx.&lt;/p&gt;

&lt;h3 id=&#34;locks&#34;&gt;Locks&lt;/h3&gt;

&lt;p&gt;Mutex is a name for a lock. Mutual exclusion. Rust fundamentally uses ownership to manage unlocks of locks you’ve taken. You never need to unlock or let go of the data.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2014 - Day Two</title>
      <link>http://alwayscoding.ca/momentos/2014/08/12/cascadia-ruby-2014-day-two/</link>
      <pubDate>Tue, 12 Aug 2014 09:30:59 UTC</pubDate>
      
      <guid>http://alwayscoding.ca/momentos/2014/08/12/cascadia-ruby-2014-day-two/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2014.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/tjschuck&#34;&gt;T.J. Schuck&lt;/a&gt;&lt;br /&gt;
80,000 Plaintext Passwords: An Open Source Love Story in Three Acts&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;John the Ripper password cracker.&lt;/li&gt;
&lt;li&gt;hashcat.&lt;/li&gt;
&lt;li&gt;Expensive key schedule blowfish. eksblowfish.&lt;/li&gt;
&lt;li&gt;BCrypt

&lt;ul&gt;
&lt;li&gt;BCrypt dollar signs are delimieters, hash on far right. Salt on left.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2(abxy)&lt;/code&gt; means bcrypt&lt;/li&gt;
&lt;li&gt;10 = cost&lt;/li&gt;
&lt;li&gt;$ 2a $ 10 $ salt $ hash&lt;/li&gt;
&lt;li&gt;12 to 13 range for bcrypt cost.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rake-compiler&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/jasonrclark&#34;&gt;Jason Clark&lt;/a&gt;&lt;br /&gt;
Programming in the Small - Teaching my 5 Year Old Ruby&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Patience.&lt;/li&gt;
&lt;li&gt;Recall.&lt;/li&gt;
&lt;li&gt;Mistakes.&lt;/li&gt;
&lt;li&gt;Discovery.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/hone02&#34;&gt;Terence Lee&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/kenichi_pdx&#34;&gt;Kenichi Nakamura&lt;/a&gt;&lt;br /&gt;
Creating a Chat App in 15 Minutes with Angelo&lt;/p&gt;

&lt;p&gt;Websockets
- &lt;code&gt;https://github.com/kenichi/angelo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Events
- IE does not support server sent events.
- EventSource API.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/lizmrush&#34;&gt;Liz Rush&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/SomanyHs&#34;&gt;Hsing-Hui Hsu&lt;/a&gt;&lt;br /&gt;
&amp;ldquo;Good luck with that&amp;rdquo;: Tag Teaming Civic Data&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cylyndrical map.&lt;/li&gt;
&lt;li&gt;Spheriod map.&lt;/li&gt;
&lt;li&gt;Torus map (&amp;ldquo;donut&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;Shapefiles.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Lightening Talks&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/mjkirk&#34;&gt;Matthew Kirk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Machine Learning in Ruby
  - C Libs
  - JRuby
  - R
  - Thoughtful Machine Learning (Book)
  - Facial Classifications
  - The Kernel Trick
  - &lt;a href=&#34;thoughtfulml.com&#34;&gt;thoughtfulml.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/jxxf&#34;&gt;John Feminella&lt;/a&gt;&lt;br /&gt;
Card counting
 - is legal via only your brain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/davidcmelida&#34;&gt;David Molida&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hacking &amp;amp; Federal Procurement
- $250billion + a year.
- Bid on government contracts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/bethanyrentz&#34;&gt;Bethany Rentz&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rubocop: Styleistic errors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/laurenvoswinkel&#34;&gt;Lauren Voswinkle&lt;/a&gt;&lt;br /&gt;
Talking about money.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lie about what your previous salary was.&lt;/li&gt;
&lt;li&gt;Employers are only allowed to verify employment dates.&lt;/li&gt;
&lt;li&gt;1935 Extneded National labours act to allow talking about salaries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[name]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby is bad at CMS&amp;rsquo;s&lt;/li&gt;
&lt;li&gt;Locomotive&lt;/li&gt;
&lt;li&gt;Rifenery&lt;/li&gt;
&lt;li&gt;Comfortable Mexican Sofar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cassie Schmitz&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;Prose.io&lt;/li&gt;
&lt;li&gt;Easy to write plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/realntl&#34;&gt;Nathan Ladd&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt; instead of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stop using TDD.&lt;/li&gt;
&lt;li&gt;Stop memoizing. Conceptualize your lifecycle.&lt;/li&gt;
&lt;li&gt;Get rid of private methods. Removes variability of input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/kerrizor&#34;&gt;Kerrir Miller&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://speakerdeck.com/kerrizor/you-jelly&#34;&gt;Make Jam&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;5-6 cups of mashed fruit&lt;/li&gt;
&lt;li&gt;Add a box epctin and bring to a rolling boil.&lt;/li&gt;
&lt;li&gt;4 cups of sweetner.&lt;/li&gt;
&lt;li&gt;Another rolling boil.&lt;/li&gt;
&lt;li&gt;remove from heat.&lt;/li&gt;
&lt;li&gt;Refridgerate or freeze&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/swindsor&#34;&gt;Scott Windsor&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test induced design damage.&lt;/li&gt;
&lt;li&gt;Dependency Injection done wrong sucks.&lt;/li&gt;
&lt;li&gt;Write better code and better tests.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://s3.sentientmonkey.com/tdd-lightning-cascadia-2014.pdf&#34;&gt;http://s3.sentientmonkey.com/tdd-lightning-cascadia-2014.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/joelstimson&#34;&gt;Joel Stimson&lt;/a&gt;
Citizen Science&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where regular people go to help scientists.&lt;/li&gt;
&lt;li&gt;Stardust at home.&lt;/li&gt;
&lt;li&gt;Zooniverse: Glassifying Galaxies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/stim371/citizen-science-lightning-talk-cascadia-ruby-2014&#34;&gt;https://speakerdeck.com/stim371/citizen-science-lightning-talk-cascadia-ruby-2014&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/djspinmonkey&#34;&gt;John Hyland&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User services as a gem.&lt;/li&gt;
&lt;li&gt;Permissions service as a gem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/amywoodward&#34;&gt;Amy Woodward&lt;/a&gt;&lt;br /&gt;
Bitcoin mining.
Fastest bitcoin mining chips in the world.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/roseaboveit&#34;&gt;Whitenet-Rose Levis&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Help new people.&lt;/li&gt;
&lt;li&gt;Types of investment

&lt;ul&gt;
&lt;li&gt;Teaching&lt;/li&gt;
&lt;li&gt;Conversations&lt;/li&gt;
&lt;li&gt;Writing&lt;/li&gt;
&lt;li&gt;Code Reviews&lt;/li&gt;
&lt;li&gt;Actively Welcome People&lt;/li&gt;
&lt;li&gt;Slight Adaptations&lt;/li&gt;
&lt;li&gt;Financial&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/_jnf&#34;&gt;Jeremy Flores&lt;/a&gt;&lt;br /&gt;
How Not to Be Lonely: An Extrovert&amp;rsquo;s Guide to Working Alone
Tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ScreenHero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Engage in active communication!
Cultivate your voice.&lt;/p&gt;

&lt;p&gt;Pair programming.
Everybody&amp;rsquo;s remote.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/laurenvoswinkel&#34;&gt;Lauren Voswinkle&lt;/a&gt;&lt;br /&gt;
Nitty Gritty Service Building&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SonJay&lt;/code&gt; &lt;a href=&#34;https://github.com/stevecj/son_jay&#34;&gt;https://github.com/stevecj/son_jay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Typhoeus&lt;/code&gt; &lt;a href=&#34;https://github.com/typhoeus/typhoeus&#34;&gt;https://github.com/typhoeus/typhoeus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StackProf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/listrophy&#34;&gt;Brad Grzesiak&lt;/a&gt;&lt;br /&gt;
SPAAAAAAAAACE&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2014 - Day One</title>
      <link>http://alwayscoding.ca/momentos/2014/08/11/cascadia-ruby-2014-day-one/</link>
      <pubDate>Mon, 11 Aug 2014 09:26:37 UTC</pubDate>
      
      <guid>http://alwayscoding.ca/momentos/2014/08/11/cascadia-ruby-2014-day-one/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2014.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/djspinmonkey&#34;&gt;John Hyland&lt;/a&gt;&lt;br /&gt;
Be Awesome By Being Boring&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“standard is better then better”&lt;/li&gt;
&lt;li&gt;Nobody know how it works yet.&lt;/li&gt;
&lt;li&gt;Docker apis changed.&lt;/li&gt;
&lt;li&gt;No standard uusage pattern.&lt;/li&gt;
&lt;li&gt;Security wild card.&lt;/li&gt;
&lt;li&gt;Protocol Buffer version of your performance critical endpoints.&lt;/li&gt;
&lt;li&gt;SRV Records.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/davystevenson&#34;&gt;Davy Stevenson&lt;/a&gt;&lt;br /&gt;
The Science of Success&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jarvis March (Gift wrapping Algorithm.)&lt;/li&gt;
&lt;li&gt;Monotone Algorithm.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;benchmark/ips&lt;/code&gt; Runs iterations per second.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;benchmark-bigo&lt;/code&gt; Benchmarks big o notation algorithms.&lt;/li&gt;
&lt;li&gt;geojson.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/geeksam&#34;&gt;Sam Livingston-Gray&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://tinyurl.com/cog-shorts-cascadia&#34;&gt;Cognitive Shortcuts: Models, Visualizations, Metaphors, and Other Lies&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programming is hard. Due to abstractions.&lt;/li&gt;
&lt;li&gt;Visual/Spatial Reasoning

&lt;ul&gt;
&lt;li&gt;The Squint Test: Stand back and try to discern identifiable parts of the
code. Heavily margined, columns.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Linguistic/Social Reasoning:

&lt;ul&gt;
&lt;li&gt;Rubber Ducking.&lt;/li&gt;
&lt;li&gt;Start writing an email describing the problem.&lt;/li&gt;
&lt;li&gt;Please Mr. Gear what is your ratio?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Practical Object Oriented Design in Ruby - Sandi Metz.&lt;/li&gt;
&lt;li&gt;Body Syntonic Reasoning.&lt;/li&gt;
&lt;li&gt;Saccades.&lt;/li&gt;
&lt;li&gt;Pac Man Smell solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/hondanhon&#34;&gt;Dan Hon&lt;/a&gt;&lt;br /&gt;
Designing for Empathy&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GOV.UK: Shows only the next holiday.&lt;/li&gt;
&lt;li&gt;Zappos CS will send you to competitors if it helps you.&lt;/li&gt;
&lt;li&gt;Dropbox setup user friendly opt-out while telecoms require mail sent to a PO
box.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/jxxf&#34;&gt;John Feminella&lt;/a&gt;&lt;br /&gt;
Why We Can&amp;rsquo;t Have Nice Things: Unicode, Dates, and Names&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As humans our assumptions make it in to our code.&lt;/li&gt;
&lt;li&gt;Marriage license database had man and woman id. This fails in states with
same sex marriages.&lt;/li&gt;
&lt;li&gt;Time.advance can cuase errors when moving over months with 28 days.&lt;/li&gt;
&lt;li&gt;Scunthorpe problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/StarrHorne&#34;&gt;Starr Horne&lt;/a&gt;&lt;br /&gt;
Biggish Data With Rails and Postgresql&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Vitures of a programmer

&lt;ul&gt;
&lt;li&gt;Laziness&lt;/li&gt;
&lt;li&gt;Impatience&lt;/li&gt;
&lt;li&gt;Hubris&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use real computers to work with your database.&lt;/li&gt;
&lt;li&gt;Use explain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Common problems&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Slooow cache misses.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/biggish-pgtune&#34;&gt;http://bit.ly/biggish-pgtune&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Slooow disk I/O

&lt;ul&gt;
&lt;li&gt;blockdev &amp;ndash;setra 2048 /dev/sda&lt;/li&gt;
&lt;li&gt;Read ahead cache&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Slooow Vacuums

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/biggish-vacuum&#34;&gt;http://bit.ly/biggish-vacuum&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Too Mandy DB Connections

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/biggish-pool&#34;&gt;http://bit.ly/biggish-pool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;My locks have locked my locks

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/biggish-locks&#34;&gt;http://bit.ly/biggish-locks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;but I have to run a report full of slow queries!

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/biggish-replication&#34;&gt;http://bit.ly/biggish-replication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;I can&amp;rsquo;t delete these old rows!

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/biggish-partition&#34;&gt;http://bit.ly/biggish-partition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Backups take forever

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/biggish-wal-e&#34;&gt;http://bit.ly/biggish-wal-e&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/MilesForrest&#34;&gt;Miles Forrest&lt;/a&gt;&lt;br /&gt;
Cloning the Seattle Ruby Brigade&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t always enforce the problem areas.&lt;/li&gt;
&lt;li&gt;Enforce the areas that you need to protect.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/thagomizer_rb&#34;&gt;Aja Hammerly&lt;/a&gt;&lt;br /&gt;
N design patterns you might actually use (where N is &amp;lt; 10)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Outline for a similar task.&lt;/li&gt;
&lt;li&gt;ETL: Extract Transfer Load.&lt;/li&gt;
&lt;li&gt;Share common code.&lt;/li&gt;
&lt;li&gt;Advantages

&lt;ul&gt;
&lt;li&gt;Isolate difference.&lt;/li&gt;
&lt;li&gt;Easy to add new versions.&lt;/li&gt;
&lt;li&gt;Force common algorithm.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Disadvantages

&lt;ul&gt;
&lt;li&gt;Read multiple files&lt;/li&gt;
&lt;li&gt;Inheirtance * 2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Storage Strategy&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Composite&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let consumers ignore quantity.&lt;/li&gt;
&lt;li&gt;Trees of arbitrary depth.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Decorator&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Command&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/tenderlove&#34;&gt;Aaron Patterson&lt;/a&gt;&lt;br /&gt;
Speed up Rails, Speed up Your Code&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Markov Chains.&lt;/li&gt;
&lt;li&gt;Binary Heap to pick random children.&lt;/li&gt;
&lt;li&gt;ruby -d&lt;/li&gt;
&lt;li&gt;&lt;code&gt;benchmark-ips&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stackprof&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocation_tracer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tracepoint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Fewer types =/= faster/easier code.&lt;/li&gt;
&lt;li&gt;Freeze strings if performance requires it.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2013 - Day Two</title>
      <link>http://alwayscoding.ca/momentos/2013/10/22/cascadia-ruby-2013-day-two/</link>
      <pubDate>Tue, 22 Oct 2013 15:22:00 UTC</pubDate>
      
      <guid>http://alwayscoding.ca/momentos/2013/10/22/cascadia-ruby-2013-day-two/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2013.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/adelcambre&#34;&gt;Andy Delcambre&lt;/a&gt;
Cascadia Ruby 2013: Ruby Systems Programming&lt;/p&gt;

&lt;h2 id=&#34;the-kernal&#34;&gt;The kernal&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Runs in kernal mode.&lt;/li&gt;
&lt;li&gt;Not your code.&lt;/li&gt;
&lt;li&gt;Can do anything and everything.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;your-code&#34;&gt;Your Code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Runs in user mode.&lt;/li&gt;
&lt;li&gt;Math.&lt;/li&gt;
&lt;li&gt;Access memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;system-calls&#34;&gt;System calls&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ask the kernal nicely to do things.&lt;/li&gt;
&lt;li&gt;Api to kenal mode.&lt;/li&gt;
&lt;li&gt;If it is not in the syscall_table you can not call it.&lt;/li&gt;
&lt;li&gt;Unix has 261 syscalls implemented.&lt;/li&gt;
&lt;li&gt;Windows has thousands listed (implemented/unimplemented).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Linux System Programming by Robert Love&lt;/li&gt;
&lt;li&gt;Unix Network Programming by Richard Stevens&lt;/li&gt;
&lt;li&gt;Advanced Programming in the UNIX Environment by Richard Stevens&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/davystevenson&#34;&gt;Davy Stevenson&lt;/a&gt;
Ruby as Art; Ruby as Science; Ruby as Craft&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyses and study of algorithms.&lt;/li&gt;
&lt;li&gt;Algorithm: A set of instructions that will solve a particular problem.&lt;/li&gt;
&lt;li&gt;Fuctional programming in ruby.&lt;/li&gt;
&lt;li&gt;The best code is no code. The best code is code that already exists.&lt;/li&gt;
&lt;li&gt;There is a difference between being correct and being right.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/kerrizor&#34;&gt;Kerri Miller&lt;/a&gt;
Cascadia Ruby 2013: Gambling for Rubyists&lt;/p&gt;

&lt;p&gt;Every decision is a compromise. We pick postgres over mysql because we feel we are getting a benefeit.&lt;/p&gt;

&lt;p&gt;“You are the best” + Be Humble&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/jerrydantonio&#34;&gt;Jerry D&amp;rsquo;Antonio&lt;/a&gt; &lt;a href=&#34;https://github.com/jdantonio/concurrent-ruby-presentation&#34;&gt;code&lt;/a&gt;
Advanced Multithreading in Ruby&lt;/p&gt;

&lt;h2 id=&#34;concurrency&#34;&gt;Concurrency&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Blocking IO is one of the first reasons to use concurrency.&lt;/li&gt;
&lt;li&gt;Shared muteable data is bad.&lt;/li&gt;
&lt;li&gt;Future represents actions that take effect at a future time and return a specific value.&lt;/li&gt;
&lt;li&gt;mutex.sychronize.&lt;/li&gt;
&lt;li&gt;Do not block the reactor.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jdantonio/concurrent-ruby&#34;&gt;Concurrent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/harukizaemon/hamster&#34;&gt;Hamster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Threadsafe&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eventmachine/eventmachine&#34;&gt;Eventmachine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ruby-amqp/amqp&#34;&gt;AMQP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/celluloid/celluloid&#34;&gt;Celluloid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/geeksam&#34;&gt;Sam Livingston-Gray&lt;/a&gt;, &lt;a href=&#34;http://www.slideshare.net/geeksam/fluent-refactoring-cascadia-ruby-conf-2013-1021&#34;&gt;slides&lt;/a&gt;
Fluent Refactoring&lt;/p&gt;

&lt;h2 id=&#34;definitions&#34;&gt;Definitions&lt;/h2&gt;

&lt;h3 id=&#34;refactoring&#34;&gt;Refactoring&lt;/h3&gt;

&lt;p&gt;A language that describes ways to make your code suck less.&lt;/p&gt;

&lt;h3 id=&#34;fluency&#34;&gt;Fluency&lt;/h3&gt;

&lt;p&gt;What you can say when you are woken up in the middle of the night with
a flashlight in your face.&lt;/p&gt;

&lt;p&gt;Levels of Proficiency&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Level 1; Tarzan at a Party; “Beer!” “Good party.”&lt;/li&gt;
&lt;li&gt;Level 2; Going to the party; “Where is the party?” “How do I get to the
party”&lt;/li&gt;
&lt;li&gt;Level 3; Discussing the party; “What happened at the party last night?”&lt;/li&gt;
&lt;li&gt;Level 4; Charlie Rose; “Should parties be illegal?”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;patterns&#34;&gt;Patterns&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Guard Clause; Best practices in small talk.&lt;/li&gt;
&lt;li&gt;Flatten Nested Conditionals.&lt;/li&gt;
&lt;li&gt;SRP (Single Responsibility Prinicpal).&lt;/li&gt;
&lt;li&gt;Replace Conditional With Polymorphism.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;read&#34;&gt;Read&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Practical Object-Oriented Ruby&lt;/li&gt;
&lt;li&gt;Refactoring&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Lightning Talks
Apologies if I misspelled anyones names below.&lt;/p&gt;

&lt;h2 id=&#34;rex-lexer-generator&#34;&gt;Rex lexer generator&lt;/h2&gt;

&lt;p&gt;by: Ryan Davis&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ruby_parser lexer - Unmaintainable.&lt;/li&gt;
&lt;li&gt;Oedipus Lex - “This is not your fathers lexer.”&lt;/li&gt;
&lt;li&gt;Massive extensions.&lt;/li&gt;
&lt;li&gt;Self-bootstrapping.&lt;/li&gt;
&lt;li&gt;Uses ruby more directly.&lt;/li&gt;
&lt;li&gt;Predicate methods.&lt;/li&gt;
&lt;li&gt;Action methods.&lt;/li&gt;
&lt;li&gt;Clean state changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;focus-on-the-custard&#34;&gt;Focus on the Custard&lt;/h2&gt;

&lt;p&gt;by: Bethany Rentz&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put the customer first in the designs.&lt;/li&gt;
&lt;li&gt;You != Your customer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-surfers-rule&#34;&gt;The Surfers Rule&lt;/h2&gt;

&lt;p&gt;by: Milan Loveless&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Have Passion.&lt;/li&gt;
&lt;li&gt;No Dare / No Flair. Try things and be innovative.&lt;/li&gt;
&lt;li&gt;Always look outside. Look where you can learn.&lt;/li&gt;
&lt;li&gt;Move before it moves you.&lt;/li&gt;
&lt;li&gt;Never turn your back on the ocean.&lt;/li&gt;
&lt;li&gt;Expect to wipe out.&lt;/li&gt;
&lt;li&gt;Never surf alone.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;speed-up-your-tests-with-rspec-set&#34;&gt;Speed up your tests with rspec-set&lt;/h2&gt;

&lt;p&gt;by: Philippe Creux&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FactoryGirl is sloooow.&lt;/li&gt;
&lt;li&gt;rspec-set creates records in the db prior to running transactions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;seattle-rb&#34;&gt;Seattle.rb&lt;/h2&gt;

&lt;p&gt;by: Pete Higgins&lt;/p&gt;

&lt;p&gt;First Tuesday of every month. Presentation oriented social occasion with “Show and tell.”&lt;br /&gt;
All other Tuesdays are hack nights.&lt;br /&gt;
seattlerb.org&lt;/p&gt;

&lt;h2 id=&#34;regional-conferences&#34;&gt;Regional Conferences&lt;/h2&gt;

&lt;p&gt;by: Koby Ranquest&lt;/p&gt;

&lt;h3 id=&#34;los-angelos-ruby-conference&#34;&gt;Los Angelos Ruby Conference&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Feb 8th.&lt;/li&gt;
&lt;li&gt;Very newbie friendly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ruby-on-ales-2014&#34;&gt;Ruby on Ales 2014&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bend Oregon.&lt;/li&gt;
&lt;li&gt;The tower theatre.&lt;/li&gt;
&lt;li&gt;March 6th - 7th.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-cautionary-tale&#34;&gt;A Cautionary Tale&lt;/h2&gt;

&lt;p&gt;by: Jason Clark&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forks not alaways an exact copy.&lt;/li&gt;
&lt;li&gt;Only the thread that calls fork goes to the new thread.&lt;/li&gt;
&lt;li&gt;Locks cause problems.&lt;/li&gt;
&lt;li&gt;Lock doesn&amp;rsquo;t always release on child process.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pdx-rb&#34;&gt;pdx.rb&lt;/h2&gt;

&lt;p&gt;by: Audrie Eschright&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calagator for pdx meetups.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;epdx.org&#34;&gt;ePDX.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;PDX employer graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;woodshop&#34;&gt;Woodshop&lt;/h2&gt;

&lt;p&gt;by: Scott Windsor&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build your own Code Climate inside vim.&lt;/li&gt;
&lt;li&gt;Flog inside vim.&lt;/li&gt;
&lt;li&gt;Simplecov inside vim.&lt;/li&gt;
&lt;li&gt;Hack your tools.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sentientmonkey/vimfiles&#34;&gt;https://github.com/sentientmonkey/vimfiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ruby-is-broken&#34;&gt;Ruby is Broken&lt;/h2&gt;

&lt;p&gt;by: Nathan Zook&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No one is perfect.&lt;/li&gt;
&lt;li&gt;Should not be able to not use namespaces.&lt;/li&gt;
&lt;li&gt;Method resolution order.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-talks-omitted-i-missed-them&#34;&gt;2 Talks omitted (I missed them)&lt;/h2&gt;

&lt;h2 id=&#34;a-game-in-ruby&#34;&gt;A Game in ruby&lt;/h2&gt;

&lt;p&gt;by: Robby Clements&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jlnr/gosu&#34;&gt;Gosu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chungu?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;centralized-logging&#34;&gt;Centralized Logging&lt;/h2&gt;

&lt;p&gt;by: Ashlegh Baumgardner&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logstash.&lt;/li&gt;
&lt;li&gt;Logstash sleeps and retrys causes problems.&lt;/li&gt;
&lt;li&gt;Sparsify.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ruby-testing&#34;&gt;Ruby Testing&lt;/h2&gt;

&lt;p&gt;by: Amiel Martin&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testing notifications via led lights.&lt;/li&gt;
&lt;li&gt;DigiSpark.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/sarablackthorne&#34;&gt;Sara Blackthorne&lt;/a&gt;
The Client is Always Right {But Sometimes They Need a Little Help}&lt;/p&gt;

&lt;h2 id=&#34;who&#34;&gt;Who?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Who is the intended user group?&lt;/li&gt;
&lt;li&gt;What are their usability needs?&lt;/li&gt;
&lt;li&gt;Who will we test our product with before release?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How do we determine the best platform?&lt;/li&gt;
&lt;li&gt;Is this a major change or a change in usage?&lt;/li&gt;
&lt;li&gt;How is this product going to best be used?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What are the key features of this product?&lt;/li&gt;
&lt;li&gt;How do we maintain our usability?&lt;/li&gt;
&lt;li&gt;What do we build to keep our products story consistent with our core vision?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/CarlAlviani&#34;&gt;Carl Alviani&lt;/a&gt;
Not Created Equal: The History and Discernment of Plastics in Product Design&lt;/p&gt;

&lt;p&gt;How recyclable are the following products. (Due to processing methods):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Glass — 34%&lt;/li&gt;
&lt;li&gt;paper — 60%&lt;/li&gt;
&lt;li&gt;Polymer — 90%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1962 — Parkseine was developed to replace Ivory as the elephants were dying off.&lt;br /&gt;
1894 — Rayon developed to replace Silk.&lt;br /&gt;
1909 — Bakelite developed to replace Shalak. Used for things like telephones, appliances, &amp;amp; pencil sharpeners.&lt;/p&gt;

&lt;p&gt;1933 — PVC &amp;amp; Acrylic&lt;br /&gt;
1939 — Polythylene &amp;amp; Nylon&lt;br /&gt;
1941 — PET &amp;amp; ABS&lt;/p&gt;

&lt;p&gt;Real silicone is identifiable by bending it and verifying there is no visible
difference with it.&lt;/p&gt;

&lt;p&gt;#7 Recycling symbol “Other” is not recyclable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.core77.com&#34;&gt;core77.com&lt;/a&gt; &amp;amp; Search: “Not created Equal: A Long (Loving) Plastics Primer”&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cascadia Ruby 2013 - Day One</title>
      <link>http://alwayscoding.ca/momentos/2013/10/21/cascadia-ruby-2013-day-one/</link>
      <pubDate>Mon, 21 Oct 2013 15:45:00 UTC</pubDate>
      
      <guid>http://alwayscoding.ca/momentos/2013/10/21/cascadia-ruby-2013-day-one/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This post is an un-contexualized, un-edited, &amp;amp; un-proofed bunch of notes taken during Cascadia Ruby 2013.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/knewter&#34;&gt;Josh Adams&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/robby_clements&#34;&gt;Robby Clements&lt;/a&gt;
Ruby Robotics&lt;/p&gt;

&lt;h2 id=&#34;where-to-start&#34;&gt;Where to start&lt;/h2&gt;

&lt;h3 id=&#34;sphero-130-00&#34;&gt;Sphero - $130.00&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bluetooth enabled ball.&lt;/li&gt;
&lt;li&gt;Drives itself around.&lt;/li&gt;
&lt;li&gt;Best dog toy ever.&lt;/li&gt;
&lt;li&gt;Waterproof.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;parrot-ar-droid-150-00&#34;&gt;Parrot AR Droid - $150.00&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Acts as its own wifi AP.&lt;/li&gt;
&lt;li&gt;Connect over wifi.&lt;/li&gt;
&lt;li&gt;UDP packers.&lt;/li&gt;
&lt;li&gt;Stream video from 2 cameras.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rolling-your-own&#34;&gt;Rolling your own&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Beaglebone Black.&lt;/li&gt;
&lt;li&gt;PCDuino.&lt;/li&gt;
&lt;li&gt;Arduino.&lt;/li&gt;
&lt;li&gt;Raspberry Pi.&lt;/li&gt;
&lt;li&gt;Microncontroller is a small computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pi-setup&#34;&gt;Pi Setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install rvm.&lt;/li&gt;
&lt;li&gt;Ruby.&lt;/li&gt;
&lt;li&gt;1.9.3 works better.&lt;/li&gt;
&lt;li&gt;Expect changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pi-tips&#34;&gt;Pi Tips&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Be caeful with the PI. Get transistors to protect it.&lt;/li&gt;
&lt;li&gt;Limited hardwar PWM out.&lt;/li&gt;
&lt;li&gt;At least 1amp power supply.&lt;/li&gt;
&lt;li&gt;Pi Cobbler.&lt;/li&gt;
&lt;li&gt;Cirago wifi $11.00.&lt;/li&gt;
&lt;li&gt;Case so the PI does not short out.&lt;/li&gt;
&lt;li&gt;Class 10 SD card. DD is slow on a bad card.&lt;/li&gt;
&lt;li&gt;Camera module $24.00.&lt;/li&gt;
&lt;li&gt;Ruby gem: &lt;a href=&#34;https://github.com/jwhitehorn/pi_piper&#34;&gt;Pi-Piper&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ruboto/ruboto&#34;&gt;Ruboto&lt;/a&gt; project for jruby &amp;amp; android.&lt;/li&gt;
&lt;li&gt;jRuby put the stdlib in the laod path.&lt;/li&gt;
&lt;li&gt;Pulse Width Modulation.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/everydaytype&#34;&gt;Nick Cox&lt;/a&gt;
We All Make Mistakes: Learning from Gaffes in the Ruby Community&lt;/p&gt;

&lt;p&gt;We all make mistakes.&lt;/p&gt;

&lt;h2 id=&#34;thesis&#34;&gt;Thesis&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Perfection is a goal.&lt;/li&gt;
&lt;li&gt;Mistakes in software are inevitable.&lt;/li&gt;
&lt;li&gt;Openly admit mistake.&lt;/li&gt;
&lt;li&gt;Ecourage openness.&lt;/li&gt;
&lt;li&gt;Learn from mistakes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;shame-spiral&#34;&gt;Shame spiral&lt;/h2&gt;

&lt;p&gt;When mistakes are made you can fall into a shame spiral.
Definitiation: When you feel bad about something then you feel bad about feeling bad.&lt;/p&gt;

&lt;h3 id=&#34;software-isn-t-life-or-death&#34;&gt;Software isn&amp;rsquo;t life or death.&lt;/h3&gt;

&lt;h3 id=&#34;software-ability-intelligence&#34;&gt;Software ability != intelligence&lt;/h3&gt;

&lt;h2 id=&#34;think-about-your-own-mistake&#34;&gt;Think about your own mistake&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Does it bring you anxiety.&lt;/li&gt;
&lt;li&gt;How did you handle it?&lt;/li&gt;
&lt;li&gt;Did you cover it up with tech jargon so know one knew it happened.&lt;/li&gt;
&lt;li&gt;Did you bring it up with someone?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;blameless-postmortems&#34;&gt;Blameless Postmortems&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What actions did they took at what time?&lt;/li&gt;
&lt;li&gt;What effects did you observe during the time of crisis? (How was it
handeled?)&lt;/li&gt;
&lt;li&gt;Expectations they had?&lt;/li&gt;
&lt;li&gt;Assumptions they made?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;encourage-team-communication&#34;&gt;Encourage team communication&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dev days or half days.&lt;/li&gt;
&lt;li&gt;Teamwide postmortems.&lt;/li&gt;
&lt;li&gt;Lunch &amp;amp; Learn.&lt;/li&gt;
&lt;li&gt;Consultancy? Write a post about it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;conslusion&#34;&gt;Conslusion&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Mistakes are inevitable.&lt;/li&gt;
&lt;li&gt;Change the conversation: Mistakes shoud teach lessons.&lt;/li&gt;
&lt;li&gt;What are we doing as a culture to encourage transparency?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nick also published a software confessional &lt;a href=&#34;http://softwareconfessional.com/&#34;&gt;http://softwareconfessional.com/&lt;/a&gt;
if you wanted to make a confession about a major bug you created.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/copiousfreetime&#34;&gt;Jeremy Hinegardner&lt;/a&gt;
Taking Ruby to the Movies&lt;/p&gt;

&lt;h2 id=&#34;act-1&#34;&gt;Act 1&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Import - Shipping your HD to amazon.&lt;/li&gt;
&lt;li&gt;Create Manifest.&lt;/li&gt;
&lt;li&gt;Prpare your device.&lt;/li&gt;
&lt;li&gt;Send a CreateJob.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Put extra stuff on shipping boxes. FedEx records all of those things.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;act-2&#34;&gt;Act 2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;S3 torrent file. Add “.torrent” to any url. Only torrents smaller then 5GB in size.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/maxgillett/s3_multipart&#34;&gt;S3 multipart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;act-3&#34;&gt;Act 3&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use FFmpeg.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;act-4&#34;&gt;Act 4&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Firstboot.&lt;/li&gt;
&lt;li&gt;Init script.&lt;/li&gt;
&lt;li&gt;rc.local.&lt;/li&gt;
&lt;li&gt;Amazon User Data. (curl any instance url).&lt;/li&gt;
&lt;li&gt;:shutdown_behavior =&amp;gt; &amp;lsquo;terminate&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/StarrHorne&#34;&gt;Starr Horne&lt;/a&gt;
The hackers guide to usability testing&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design can have bugs.&lt;/li&gt;
&lt;li&gt;Programmers are not your users.&lt;/li&gt;
&lt;li&gt;Designes are not your users.&lt;/li&gt;
&lt;li&gt;You clients may not be your users.&lt;/li&gt;
&lt;li&gt;Form make them feel dumb due to terminology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“Usability testing: you don&amp;rsquo;t need microphones and video cameras and two-way
mirrors and guys in lab coats.”
 - You don&amp;rsquo;t need a lab or a team. Just sit someone infront of a computer and
 have a clip board ready.&lt;/p&gt;

&lt;p&gt;Two tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is it test?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have them look at something and just ask them what it is?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Please do this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Give someone a particular task.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read: Steve Krug - Rocket Surgery Made Easy&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/thagomizer_rb&#34;&gt;Aja Hammerly&lt;/a&gt; (&lt;a href=&#34;http://www.thagomizer.com/files/something_went_wrong.pdf&#34;&gt;slide deck&lt;/a&gt;)
We&amp;rsquo;re sorry but something went wrong&lt;/p&gt;

&lt;h2 id=&#34;debugging&#34;&gt;Debugging&lt;/h2&gt;

&lt;h3 id=&#34;step-0-known-state&#34;&gt;Step 0: Known State&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not nessecarley a good state but be able to always get back to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-1-identify-a-problem&#34;&gt;Step 1: Identify A Problem&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Write down steps.&lt;/li&gt;
&lt;li&gt;Write a test.&lt;/li&gt;
&lt;li&gt;Failing Integration test is usually to big debug.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-2-make-hypothese&#34;&gt;Step 2: Make Hypothese&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avoid Conjunction.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-3-test-hypothese&#34;&gt;Step 3: Test Hypothese&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;5 minutes. You should have an understanding in 5 minutes.&lt;/li&gt;
&lt;li&gt;One thing at a time.&lt;/li&gt;
&lt;li&gt;Stop refactoring while debugging (Red/Green/Refactor).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-4-is-it-fixed&#34;&gt;Step 4: Is it fixed?&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use guard.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-5-refactor&#34;&gt;Step 5: Refactor&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Only once it is fixed can you begin refactoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;step-6a-next-failure&#34;&gt;Step 6a: Next Failure&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Re-run your tests and find out if it is still broken.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Git Bisect.&lt;/li&gt;
&lt;li&gt;People.&lt;/li&gt;
&lt;li&gt;Rubber ducking (Talk it out even if it is an inanimite object).&lt;/li&gt;
&lt;li&gt;Labradoing (Rubber Ducking).&lt;/li&gt;
&lt;li&gt;Ask for help.&lt;/li&gt;
&lt;li&gt;Read the Docs.&lt;/li&gt;
&lt;li&gt;Issue &amp;amp; Bug trackers.&lt;/li&gt;
&lt;li&gt;Mailing Lists.&lt;/li&gt;
&lt;li&gt;Set a time Limit. (30min)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;bug-writing&#34;&gt;Bug writing:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What I did&lt;/li&gt;
&lt;li&gt;What happened&lt;/li&gt;
&lt;li&gt;What I expected&lt;/li&gt;
&lt;li&gt;Notes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;be-nice&#34;&gt;Be nice&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No generalizations.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t write bugs with words: always/never/everyone. It comes off as condesending.&lt;/li&gt;
&lt;li&gt;Be Objective.&lt;/li&gt;
&lt;li&gt;“If it was obvious it would be there.”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;provide-a-patch&#34;&gt;Provide a patch&lt;/h2&gt;

&lt;p&gt;Just do it. People may not accept your patch but do not take it personally.&lt;/p&gt;

&lt;h2 id=&#34;do-not-panic&#34;&gt;Do not Panic&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Recognize the &lt;em&gt;real&lt;/em&gt; problem.&lt;/li&gt;
&lt;li&gt;Come to a consensus (including non-tech folk.)&lt;/li&gt;
&lt;li&gt;Triage. The &amp;ldquo;loudest&amp;rdquo; problem may not be the most important.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;stop-the-bleeding&#34;&gt;Stop the bleeding&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Rollback.&lt;/li&gt;
&lt;li&gt;Does it stil work?&lt;/li&gt;
&lt;li&gt;Feature Switch. To turn features off.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fix-the-issue&#34;&gt;Fix the issue&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Coordinate with your team.&lt;/li&gt;
&lt;li&gt;Write a test.&lt;/li&gt;
&lt;li&gt;Set expectations with everyone.&lt;/li&gt;
&lt;li&gt;Be pridictable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reflect&#34;&gt;Reflect&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Solo (by yourself).&lt;/li&gt;
&lt;li&gt;With your team. Ask the 5 W.&lt;/li&gt;
&lt;li&gt;Fact based (no blame).&lt;/li&gt;
&lt;li&gt;Future focused.&lt;/li&gt;
&lt;li&gt;Do not add a process. Process usually means bad communication.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/mjkirk&#34;&gt;Matt Kirk&lt;/a&gt;
Sentiment Analysis&lt;/p&gt;

&lt;h2 id=&#34;big-data-languages&#34;&gt;Big Data Languages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;Julia&lt;/li&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#39;https://twitter.com/sarablackthorne/status/392379743045054464/photo/1&#39;&gt;
  &lt;img src=&#39;http://alwayscoding.ca/images/posts/2013-10-21-ruby-is-not-complex-math.jpg&#39; alt=&#39;Ruby is not complex math&#39; /&gt;
 &lt;/a&gt;
Photo by: &lt;a href=&#34;http://twitter.com/sarablackthorne&#34;&gt;Sara Blackthorne&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;step-1-collect-data&#34;&gt;Step 1: Collect Data&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/jperla/sentiment-data&#34;&gt;github.com/jperla/sentiment-data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linear regression has a curse: The curse of dimensionality&lt;/p&gt;

&lt;p&gt;Play with it &lt;a href=&#34;http://sentiment-analyzer.heroku.com&#34;&gt;sentiment-analyzer.heroku.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;features-of-text&#34;&gt;Features of Text&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Character count.&lt;/li&gt;
&lt;li&gt;Frequency of words.&lt;/li&gt;
&lt;li&gt;Words.&lt;/li&gt;
&lt;li&gt;Stems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#39;http://alwayscoding.ca/images/posts/2013-10-21-portland-donuts.png&#39; alt=&#39;Portland Hippies make Good Donuts&#39; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/mandoescamilla&#34;&gt;Mando Escamilla&lt;/a&gt;
Tell Us Another Story, Grandpa: Lessons Learned Over 16 Years as a Developer&lt;/p&gt;

&lt;p&gt;“A bosses job is to protect and insulate employees.”&lt;/p&gt;

&lt;p&gt;“Do what you like as much as you can.”&lt;/p&gt;

&lt;p&gt;“Good employees are like gold.”&lt;/p&gt;

&lt;p&gt;“Find a mentor.”&lt;/p&gt;

&lt;p&gt;“Apply engineering principals to family and every day life.”&lt;/p&gt;

&lt;p&gt;“The worst reason to do something today is because you did it yesterday.”&lt;/p&gt;

&lt;p&gt;“Work towards your priority.”&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/aspleenic&#34;&gt;PJ Hagerty&lt;/a&gt;
Coding and The Mozart Effect&lt;/p&gt;

&lt;p&gt;8-10 iq points higher when listening to Mozart over ocean sounds or similar “calming music.”&lt;/p&gt;

&lt;p&gt;Measuring cognitive ability.&lt;/p&gt;

&lt;p&gt;The Mozart effect:
A set of research results indicating that listening to Mozart&amp;rsquo;s music may induce
a short-term improvement on the performance of certain kinds of mental tasks
known as &amp;ldquo;spatial-temporal reasoning;&amp;rdquo; Popularized versions of the hypothesis,
which suggest that &amp;ldquo;listening to Mozart makes you smarter&amp;rdquo;, or that early
childhood exposure to classical music has a beneficial effect on mental development;&lt;/p&gt;

&lt;p&gt;Most studies used the exact same peice of Mozart. They decided to test how far away
from that song and receive the same effect. They tested with Justin Bieber and found
a benefeit was still present but barely. The further away you get from the sound
of Mozart the smaller the effect will be.
Find something that is similar and within the same genre but must be a little different.
You must be finding new music. Jazz/Old Blues.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s all Ephemeral. If you listen to the same thing too often it will become less effective.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://twitter.com/the_zenspider&#34;&gt;Ryan Davis&lt;/a&gt;
Real craftsmen (can) create their own tools&lt;/p&gt;

&lt;p&gt;90% software engineering is a lie.&lt;br /&gt;
Websites/devops is not engineering.&lt;br /&gt;
We write software but it is not close to engineering.&lt;/p&gt;

&lt;p&gt;We are craftsman. We craft software.&lt;/p&gt;

&lt;p&gt;Use the right tool for the job. Custom tools. Do not always write custom tools.&lt;/p&gt;

&lt;p&gt;Algol-based languages are no grood. It is &lt;em&gt;static&lt;/em&gt; &amp;amp; &lt;em&gt;opaque&lt;/em&gt;, not
introspective and can not reason about its own code.&lt;/p&gt;

&lt;p&gt;Tool-Making is for the elite.&lt;/p&gt;

&lt;p&gt;Do you write tools to help you code? Why not?&lt;/p&gt;

&lt;h2 id=&#34;language-tools&#34;&gt;Language Tools&lt;/h2&gt;

&lt;h3 id=&#34;flog-and-flay&#34;&gt;Flog and Flay&lt;/h3&gt;

&lt;p&gt;Flog analyzes complexity on methods.&lt;/p&gt;

&lt;p&gt;Flay reports structually similar code. Fuzzily Similar code.&lt;/p&gt;

&lt;p&gt;Tools need to know how to build and walk a language.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
